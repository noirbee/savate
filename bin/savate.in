#! /usr/bin/python3

import os
import optparse
parser = optparse.OptionParser(version = '%prog @VERSION@')
parser.set_defaults(
    config_file = '@savatesysconfdir@/savate.json',
    log_file = '@localstatedir@/log/savate/savate.log',
    pid_file = '@localstatedir@/run/savate/savate.pid',
    )
parser.add_option('-c', '--config', dest = 'config_file', help = 'JSON configuration file to use, default: %default', metavar = 'CONFIG')
parser.add_option('-l', '--logfile', dest = 'log_file', help = 'log file to use, default: %default', metavar = 'LOGFILE')
parser.add_option('-p', '--pidfile', dest = 'pid_file', help = 'PID file to use, default: %default', metavar = 'PIDFILE')
parser.add_option('--background', dest = 'background', action = 'store_true', help = 'Run in the background, daemonise (default)')
parser.add_option('--foreground', dest = 'background', action = 'store_false', help = 'Run in the foreground, do not daemonise')

options, args = parser.parse_args()

import json

with open(options.config_file) as conffile:
    conf = json.load(conffile)

import logging
logger = logging.getLogger('savate')
handler = logging.FileHandler(conf.get('log_file', options.log_file))
handler.setFormatter(logging.Formatter("%(asctime)s:%(levelname)s:%(name)s(%(process)d): %(message)s"))
logger.addHandler(handler)
logger.setLevel(logging.INFO)

from savate.server import TCPServer

server = TCPServer((conf.get('bind', '0.0.0.0'), conf.get('port', 8000)), os.path.realpath(options.config_file), logger)

import signal
import sys
from daemon import DaemonContext
from daemon.daemon import redirect_stream
from daemon.pidfile import TimeoutPIDLockFile

daemon_context = DaemonContext(
    detach_process = options.background,
    pidfile = TimeoutPIDLockFile(conf.get('pid_file', options.pid_file), acquire_timeout = -1),
    files_preserve = [handler.stream],
    # We want to keep stderr around so users can diagnose what is
    # hindering daemonisation
    stderr = sys.stderr,
    )

daemon_context.signal_map = {
    signal.SIGTERM: server.stop,
    signal.SIGINT: server.stop,
    signal.SIGHUP: server.reload,
    signal.SIGUSR1: server.graceful_stop,
    }

with daemon_context:
    # We're daemonised now, close stderr
    if daemon_context.detach_process:
        redirect_stream(sys.stderr, None)

    server.create_socket()
    server.create_loop()

    logger.info('Serving on %s', server.address)

    server.config.configure()
    logger.info('Done setting up relays')

    logger.info('Starting main loop')
    server.serve_forever()
